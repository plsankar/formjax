// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  stripeCustomerId   String? @unique
  subscriptionActive Boolean @default(false)
  subscriptionId     String?

  accounts Account[]
  sessions Session[]
  forms    Form[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id     String  @id @default(cuid())
  userId String?
  email  String
  apiKey String  @unique @default(uuid())

  createdAt DateTime @default(now())

  status FormStatus @default(WORKING)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  submissions Submission[]
  tags        Tag[]        @relation("FormTags")
  tagId       String?
}

model Submission {
  id        String   @id @default(cuid())
  formId    String
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  forms Form[] @relation("FormTags")
}

enum FormStatus {
  WORKING
  PAUSED
  ARCHIVED
}
